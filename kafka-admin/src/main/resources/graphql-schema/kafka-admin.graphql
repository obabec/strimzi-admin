extend type Query {
    """ search: can contain any form of Kafka topic name """
    topicList(search: String, page: PageRequest, orderBy: OrderByInput): TopicList
    topic(name: String!): Topic!
}

extend type Mutation {
    createTopic(input: NewTopic!): Topic!
    deleteTopics(names: [String]): [String]
}

type Topic {
    """ID"""
    name: String
    isInternal: Boolean
    partitions: [Partition!]!
    config: [ConfigEntry]
}

"""embedded in Topic"""
type Partition {
    """ID"""
    partition: Int
    replicas: [Node!]!
    """InSyncReplicas"""
    isr: [Node]
    leader: Node
}

type Node {
    id: Int!
}

type ConfigEntry {
    key: String!
    value: String!
}

input OrderByInput {
    field: String!
    order: SortDirectionEnum = ASC
}

input PageRequest {
    limit: Int
    offset: Int
}

enum SortDirectionEnum {
    DESC
    ASC
}

type TopicList {
    items: [Topic]!
    offset: Int
    limit: Int
    count: Int
}

input NewTopicConfigEntry {
    key: String
    value: String
}

input NewTopic {
    name: String!
    numPartitions: Int!
    replicationFactor: Int!
    config: [NewTopicConfigEntry]
}